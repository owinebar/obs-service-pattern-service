#!/bin/bash

full_service="$(realpath "$0")"
service_name="$(basename "$0")"
#service_dir="$(dirname "$full_service")"
service_dir=/usr/lib/obs/service
if [ "$service_name" = "bash" ]; then
    echo "Service name not recognized" >&2
    exit 1
fi
DEBUG=${DEBUG:-0}
####SED_PROGRAMS
re_quote_prog=""
re_quote_prog+=$'# Initialize hold space\n'
re_quote_prog+=$'x;z;x\n'
re_quote_prog+=$': loop\n'
re_quote_prog+=$'t clear1; : clear1\n'
re_quote_prog+=$'s~^([^[@.?*()|+{}#$\\]*)$~\\1~; t returnEOL\n'
re_quote_prog+=$'s~^([^[@.?*()|+{}#$\\]+)~\\1\\n~; t accumulate\n'
re_quote_prog+=$'# First character must be special\n'
re_quote_prog+=$'s~^([[@.?*()|+{}#$\\])~\\\\\\1\\n~; t accumulate\n'
re_quote_prog+=$'b nomatcherr\n'
re_quote_prog+=$': accumulate\n'
re_quote_prog+=$'# First line of pattern space contains text to accumulate\n'
re_quote_prog+=$'# second line contains unprocessed text\n'
re_quote_prog+=$'# hold space contains processed text\n'
re_quote_prog+=$'x\n'
re_quote_prog+=$'G\n'
re_quote_prog+=$'s/^([^\\n]*)\\n([^\\n]+)\\n/\\1\\2\\n/\n'
re_quote_prog+=$'h\n'
re_quote_prog+=$'s/^([^\\n]+)\\n(.*)/\\1/\n'
re_quote_prog+=$'x\n'
re_quote_prog+=$'s/^([^\\n]+)\\n(.*)/\\2/\n'
re_quote_prog+=$'b loop\n'
re_quote_prog+=$': returnEOL\n'
re_quote_prog+=$'H\n'
re_quote_prog+=$'x\n'
re_quote_prog+=$'s/^([^\\n]*)\\n/\\1/\n'
re_quote_prog+=$'p\n'
re_quote_prog+=$'d\n'
re_quote_prog+=$': nomatcherr\n'
re_quote_prog+=$'= ; a Impossible non-match\n'
re_quote_prog+=$'q\n'
tmpl_prog1=""
tmpl_prog1+=$'/^\\w(\\w|[+-])*(\\s|$)/ {\n'
tmpl_prog1+=$'    t clear0; : clear0\n'
tmpl_prog1+=$'    h\n'
tmpl_prog1+=$'    s/^(\\w(\\w|[+-])*)(\\s.*)?$/\\1\\x00/ ; t validname\n'
tmpl_prog1+=$'    =; i Invalid name\n'
tmpl_prog1+=$'    p\n'
tmpl_prog1+=$'    Q 1\n'
tmpl_prog1+=$'    : validname\n'
tmpl_prog1+=$'    x\n'
tmpl_prog1+=$'    s/^(\\w(\\w|[+-])*)\\s+(\\S.*)$/\\3/\n'
tmpl_prog1+=$'    t clear1\n'
tmpl_prog1+=$'    : clear1\n'
tmpl_prog1+=$'    s/<<EOF\\s*(\\n|\\\')//; t EOFloop\n'
tmpl_prog1+=$'    # else whatever is left on the line is the value of the parameter\n'
tmpl_prog1+=$'    H\n'
tmpl_prog1+=$'    b gosubst\n'
tmpl_prog1+=$'\n'
tmpl_prog1+=$'    : EOFloop\n'
tmpl_prog1+=$'    # take care not to exit sed before closing the parameter block\n'
tmpl_prog1+=$'    $ b finishtmpl\n'
tmpl_prog1+=$'    n\n'
tmpl_prog1+=$'    t clear2\n'
tmpl_prog1+=$'    : clear2\n'
tmpl_prog1+=$'    s#\\`EOF(\\n|\\\')## ; t gosubst\n'
tmpl_prog1+=$'    H\n'
tmpl_prog1+=$'    b EOFloop\n'
tmpl_prog1+=$'    : gosubst\n'
tmpl_prog1+=$'    z\n'
tmpl_prog1+=$'    x\n'
tmpl_prog1+=$'    s#\\`([^\\x00]+)\\x00\\n#\\1\\x00#\n'
tmpl_prog1+=$'    # swap ordering for substitution\n'
tmpl_prog1+=$'    s#\\`([^\\x00]+)\\x00(.*)\\\'#\\2\\x00\\1#\n'
tmpl_prog1+=$'    b subst\n'
tmpl_prog1+=$'    : finishtmpl\n'
tmpl_prog1+=$'    # Check for illegal xml close tags\n'
tmpl_prog1+=$'    h\n'
tmpl_prog1+=$'    s#\\`([^\\x00]+)\\x00(.*)\\\'#\\2#\n'
tmpl_prog1+=$'    \\#</(service|param)# {\n'
tmpl_prog1+=$'	=; i Illegal xml close\n'
tmpl_prog1+=$'	p\n'
tmpl_prog1+=$'	Q 2\n'
tmpl_prog1+=$'    }\n'
tmpl_prog1+=$'    z; x\n'
tmpl_prog1+=$'    s#\\`([^\\x00]+)\\x00(.*)\\\'#    <param name="\\1">\\2</param>#\n'
tmpl_prog1+=$'    p\n'
tmpl_prog1+=$'    d\n'
tmpl_prog1+=$'}\n'
tmpl_prog1+=$'# Any other lines are illegal\n'
tmpl_prog1+=$'=; i Unrecognized\n'
tmpl_prog1+=$'p\n'
tmpl_prog1+=$'Q 1\n'
tmpl_prog1+=$'\n'
tmpl_prog1+=$'\n'
tmpl_prog1+=$': subst\n'
tmpl_prog1+=$'/\\$|\\\\/ {\n'
tmpl_prog1+=$'    : findnextsub\n'
tmpl_prog1+=$'    t clear3\n'
tmpl_prog1+=$'    : clear3\n'
tmpl_prog1+=$'    # if we are at the end of text\n'
tmpl_prog1+=$'    # clean up and restart cycle\n'
tmpl_prog1+=$'    s/\\`\\x00// ; t joinhold\n'
tmpl_prog1+=$'    # s/\\`\\n//; t accumulatenl\n'
tmpl_prog1+=$'    # Otherwise if there are non-control chars, accumulate \n'
tmpl_prog1+=$'    s/\\`([^\\$\\x00]+)/\\1\\x00/; t accumulate\n'
tmpl_prog1+=$'    # Must have a control sequence at the head\n'
tmpl_prog1+=$'    s/\\`\\\\\\\\/\\\\\\x00/ ; t accumulate\n'
tmpl_prog1+=$'    s/\\`\\\\\\$/\\$\\x00/ ; t accumulate\n'
tmpl_prog1+=$'    s/\\`\\\\/\\\\\\x00/ ; t accumulate\n'
tmpl_prog1+=$'    s/\\`\\$\\{([1-9][0-9]*)\\}/\\1\\x00/ ; t substitute\n'
tmpl_prog1+=$'    s/\\`\\$/\\$\\x00/ ; t accumulate\n'
tmpl_prog1+=$'    # should be impossible\n'
tmpl_prog1+=$'    b nomatcherr\n'
tmpl_prog1+=$'    :substitute\n'
tmpl_prog1+=$'    # commands of the form\n'
tmpl_prog1+=$'    # s#\\`<parameter number>\\x00#<replacement text>\\x00#; t accumulate\n'
tmpl_prog1+=$'####SUBSTITUTIONS\n'
tmpl_prog2=""
tmpl_prog2+=$'    # if not matched, provide empty value\n'
tmpl_prog2+=$'    s/\\`[^\\x00]+\\x00/\\x00/; t accumulate\n'
tmpl_prog2+=$'    b nomatcherr\n'
tmpl_prog2+=$'\n'
tmpl_prog2+=$'    : accumulate\n'
tmpl_prog2+=$'    # First line of pattern space contains text to accumulate\n'
tmpl_prog2+=$'    # second line contains unprocessed text\n'
tmpl_prog2+=$'    # hold space contains processed text\n'
tmpl_prog2+=$'    s/\\`/\\x00/\n'
tmpl_prog2+=$'    x\n'
tmpl_prog2+=$'    G\n'
tmpl_prog2+=$'    s/\\`([^\\x00]*)\\n\\x00([^\\x00]*)\\x00(.*)\\\'/\\1\\2/\n'
tmpl_prog2+=$'    x\n'
tmpl_prog2+=$'    s/\\`\\x00([^\\x00]*)\\x00(.*)\\\'/\\2/\n'
tmpl_prog2+=$'    b findnextsub\n'
tmpl_prog2+=$'\n'
tmpl_prog2+=$'    : joinhold\n'
tmpl_prog2+=$'    s/\\\'/\\x00/\n'
tmpl_prog2+=$'    G\n'
tmpl_prog2+=$'    s/\\`([^\\x00]*\\x00)\\n/\\1/\n'
tmpl_prog2+=$'    x;z;x\n'
tmpl_prog2+=$'    b finishtmpl\n'
tmpl_prog2+=$'    \n'
tmpl_prog2+=$'}\n'
tmpl_prog2+=$': returnsubst\n'
tmpl_prog2+=$'# now back to starting configuration except last line of hold space has been substituted\n'
tmpl_prog2+=$'# swap ordering for substitution\n'
tmpl_prog2+=$'s#\\`([^\\x00]+)\\x00(.*)\\\'#\\2\\x00\\1#\n'
tmpl_prog2+=$'b finishtmpl\n'
tmpl_prog2+=$': nomatcherr\n'
tmpl_prog2+=$'= ; i Impossible non-match\n'
tmpl_prog2+=$'Q 1\n'

ssed() {
    sed --sandbox -En "$@"
}

ssed_str() {
    local text="$1"
    shift
    ( set -o pipefail;
      # ensure we do not add an extra newline at the end
      printf "%s\n" "$text" |
	  ssed "$@" |
	  head -c -1
      )
}

ssed_file() {
    local fn="$1"
    shift
    ssed_str "$(< "$fn")" "$@"
}

make_tmpl_prog() {
    local cmds=""
    local i=1
    while (( $# > 0 )); do
	cmds+="s#${i}\\x00#${1}\\x00#; t accumulate"
	cmds+=$'\n'
	(( i++ ))
	shift
    done
    local prog="$tmpl_prog1$cmds$tmpl_prog2"
    printf "%s" "$prog"
}
process_template() {
    local prog="$1"  # tmpl_prog
    local progfile="$(mktemp -p $serviced)"
    printf "%s" "$prog" >"$progfile"
    ssed_file "$2" -f "$progfile"
}
re_quote() {
    ssed_str "$1" -f "$re_quote_file"
}
legal_name() {
    local s="$1" tmp
    [ "$s" ] || return 1
    printf -v tmp "%q" "$s"
    [ "$s" != "$tmp" ] && return 1
    [ "${s//:}" != "$s" ] && return 1
    [ "${s/\/}" != "$s" ] && return 1
    return 0
}
legal_list() {
    local s="$1" tmp
    [ -z "$s" ] && return 0
    printf -v tmp "%q" "$s"
    [ "$s" != "$tmp" ] && return 1
    [ "${s/\/}" != "$s" ] && return 1
}
if ! (legal_name "$service_name" >/dev/null 2>&1); then
    echo "Service name must not contain : or shell special characters: '$service_name'" >&2
    exit 1
fi
serviced=$(mktemp -d)

on_error() {
    local last_command="$BASH_COMMAND"
    local last_line="${BASH_LINENO[0]}"
    local last_src="${BASH_SOURCE[0]}"
    echo "Error in service $service_name" >&2
    if (( DEBUG )); then
	printf "%s:%s\t%s\n" "$last_src" "$last_line" "$last_command" >&2
    fi
    exit 1
}
cleanup() {
   [ -d "$serviced" ] && rm -Rf "$serviced"
}
trap cleanup EXIT
trap on_error ERR
declare -a services
re_quote_file="$(mktemp -p $serviced)"
printf "%s" "$re_quote_prog" >$re_quote_file

get_min() {
    local val="$1"
    if [ -n "$2" ]; then
	if [ -z "$val" ]; then
	    val="$2"
	elif (( ${val} > "$2" )); then
	    val="$2"
	fi
    fi
}
get_max() {
    local val="$1"
    if [ -n "$2" ]; then
	if [ -z "$val" ]; then
	    val="$2"
	elif (( ${val} < "$2" )); then
	    val="$2"
	fi
    fi
}
check_legal() {
    local val="$1"
    local check="$2"
    local signal_err="$3"
    echo "$check"
    if [ -z "$check" ] || [ "${val}" != "$check" ]; then
	if [ "${signal_err}" ]; then
	    case "${signal_err}" in
		0 | [fF]*)
		    :
		    ;;
		*)
		    exit 1
		    ;;
	    esac
	fi
    fi
}

int_re='/^[-+]?[0-9]+/ { h ; s/^([-+]?[0-9]+).*$/\1/ ; p ; q } ; q'
pos_int_re='/^[0-9]+/ { h ; s/^([0-9]+).*$/\1/ ; p ; q } ; q'

check_integer() {
    local val="$1"
    local min="$2"
    local max="$3"
    shift 3
    local signal_err="$@"
    [ "$val" ] || return;
    local check="$(printf "%s" "$val" |
    	  	   ssed -ze "$int_re" |
		   tr -d '\000')"    
    val="$(check_legal "$val" "$check" $signal_err)" || exit #?
    val="$(get_max "$val" "$min")"
    val="$(get_min "$val" "$max")"
    echo "${val}"
}

check_positive_integer() {
    local val="$1"
    local max="$2"
    shift 2
    local signal_err="$@"
    [ "$val" ] || return;
    local check="$(printf "%s" "$val" |
    	  	   ssed -ze "$pos_int_re" |
		   tr -d '\000')"
    val="$(check_legal "$val" "$check" $signal_err)" || exit #?
    val="$(get_min "$val" "$max")"
    return ${val}
    
}

check_path() {
    local tmp
    local base="$1"
    local full="$2"
    local desc="$3"
    tmp="$(realpath --relative-base="$(realpath "${base}")" "$full")"
    case "$tmp" in
	/*)
	    echo "Illegal ${desc} file name: $full" >&2
	    exit 1
	    ;;
    esac
    tmp="$(printf "%s" "$tmp" | tr -d '\n')"
    printf "%s" "$tmp"
}

check_file_exists() {
    local fname="$1"
    if [ \! -e "$fname" ] || [ \! -f "$fname" ]; then
	echo "File '$fname' does not exist or is not a regular file" >&2
	exit 1
    fi
}
check_system_posint() {
    local tmp
    local given="$1"
    local name="$2"
    if [ "${given}" ]; then
	tmp="$(check_positive_integer "${given}" "" 1)" || {
	    echo "$name limit must be positive integer, given: '$given'" >&2
	    exit 1
	}
    fi
    echo "$tmp"
}
check_system_int() {
    local tmp
    local given="$1"
    local name="$2"
    local min="$3"
    local max="$4"
    if [ "${given}" ]; then
	if ! tmp="$(check_integer "${given}" "$min" "$max" 1)"; then
	    echo "System $name limit must be integer, given: '$given'" >&2
	    exit 1
	fi
	if [ "$tmp" -ne "$given" ]; then
	    echo "System $name limit must be between '$min' and '$max', given: '$given'" >&2
	    exit 1
	fi
    fi
    echo "$tmp"
}
available_services() {
    local -a svcs
    local tmp
    for s in $(ls "$service_dir" | grep -v '\.service$'); do
	! [ -f "$service_dir/$s" ] && continue
	! [ -x "$service_dir/$s" ] && continue
	printf -v tmp "%q" "$s"
	if [ "$tmp" != "$s" ] || [ "${s//:}" != "$s" ] ; then
	    echo "Warning: discarding service '$s' due to illegal characters in name" >&2
	    continue
	fi
  	svcs[${#svcs[@]}]="$s"
    done
    ( IFS=":"; echo "${svcs[*]}" )
}
list_add_elt() {
    local elt="$1"
    local ls="$2"
    local tmp
    #  Ensure we never have any potential problems
    printf -v tmp "%q" "$elt"
    if [ -z "$elt" ] ||
	   [ "$tmp" != "$elt" ] ||
	   [ "${elt//:}" != "$elt" ] ; then
	echo "Warning: discarding '$s' due to containing either no or illegal characters" >&2
	echo "$ls"
	return
    fi
  
    case "$ls" in
	"$elt":* | *:"$elt" | *:"$elt":* | "$elt")
	    :
	    ;;
	*)
	    ls="${ls}${ls:+:}$elt"
	    ;;
    esac
    echo "$ls"
}
list_member() {
    local elt="$1"
    local ls="$2"
    case "$ls" in
	"$elt":* | *:"$elt" | *:"$elt":* | "$elt")
	    return 0
	    ;;
	*)
	    return 1
	    ;;
    esac
    # should not happen
    return 1
}


check_services() {
    local allowed="$1"
    local excluded="$2"
    local s ls=""
    if [ -z "$allowed" ]; then
	allowed="$(available_services)"
    fi
    for s in ${allowed//:/ }; do
	list_member "$s" "$excluded" && continue
	ls="$(list_add_elt "$s" "$ls")"
    done
    echo "$ls"
}

# these values may be set by the system configuration file
system_cpu_limit=""
system_memory_limit=""
system_stack_limit=""
system_file_size_limit=""
system_table_size_limit=""
system_table_lines_limit=""
system_template_size_limit=""
system_allowed_services=""
system_excluded_services=""

system_config="/etc/obs/service/$service_name"
if [ -e "$system_config" ]; then
    . "$system_config"
fi
# Make sure the system defaults are legal
system_cpu_limit="$(check_system_posint "${system_cpu_limit}" "CPU")"
system_memory_limit="$(check_system_posint "${system_memory_limit}" "memory")"
system_stack_limit="$(check_system_posint "${system_stack_limit}" "stack")"
system_file_size_limit="$(check_system_posint "${system_file_size_limit}" "file size")"
system_table_size_limit="$(check_system_posint "${system_table_size_limit}" "table size")"
system_table_lines_limit="$(check_system_posint "${system_table_lines_limit}" "table lines")"
system_template_size_limit="$(check_system_posint "${system_template_size_limit}" "template size")"
if ! legal_list "${system_allowed_services}"; then
    echo "Allowed services list cannot be processed: '${system_allowed_services}'"
    exit 1
fi
if ! legal_list "${system_excluded_services}"; then
    echo "Excluded services list cannot be processed: '${system_excluded_services}'"
    exit 1
fi
script=""
infile=""
outfile=""
outdir=""
template_file="$(mktemp -p $serviced)"
syntax_flag="-E"
noprint_flag=""
null_flag=""
wrap_flag=""
missing_input="fail"
cpu_limit=""
memory_limit=""
stack_limit=""
file_size_limit=""
priority_limit=""
script_size_limit=""
mode="script"
svc=""
allowed_services=""
excluded_services=""

declare -a tmpls tmpl_svcs tmpl_tps tmpl_scripts

while [ $# -gt 0 ]; do
    case $1 in
    	--service)
	    svc="$2"
	    if ! legal_name "$svc"; then
		echo "Illegal service name requested '$svc'" >&2
		exit 1
	    fi
	    ;;
	--template-file)
	    if [ -z "$svc" ]; then
		echo "A service must be specified prior to any template" >&2
		exit 1
	    fi
	    tmp="$(check_path "$(pwd)" "$2" "template")"
	    printf "%s %s %q\n" "$svc" "file" "$tmp" >>"$template_file"
	    ;;
	--template)
	    if [ -z "$svc" ]; then
		echo "A service must be specified prior to any template" >&2
		exit 1
	    fi
	    tmp="$(mktemp -p $serviced)"
	    printf "%s\n" "$2" >"$tmp"
	    printf "%s %s %q\n" "$svc" "expr" "$tmp" >>"$template_file"
	    ;;
	--table)
	    tmp="$(check_path "$(pwd)" "$2" "table file")"
	    infile="$tmp"
	    ;;
	--services-file)
	    outfile="${2}"
	    ;;
	--cpu-limit)
	    cpu_limit="$(check_positive_integer "$2" "${system_memory_limit}")" 
	    ;;
	--memory-limit)
	    memory_limit="$(check_positive_integer "$2" "${system_memory_limit}")" 
	    ;;
	--stack-limit)
	    stack_limit="$(check_positive_integer "$2" "${system_stack_limit}")" 
	    ;;
	--file-size-limit)
	    file_size_limit="$(check_positive_integer "$2" "${system_file_size_limit}")"
	    ;;
	--table-size-limit)
	    table_size_limit="$(check_positive_integer "$2" "${system_table_size_limit}")"
	    ;;
	--table-lines-limit)
	    table_lines_limit="$(check_positive_integer "$2" "${system_table_lines_limit}")"
	    ;;
	--template-size-limit)
	    template_size_limit="$(check_positive_integer "$2" "${system_template_size_limit}")"
	    ;;
	--excluded_services)
	    tmp="$2""$(legal_name "$2")"
	    if ! legal_name "$tmp"; then
		echo "Illegal excluded service name $2, aborting" >&2
		exit 1
	    fi
	    excluded_services="$(list_add_elt "$tmp" "$excluded_services")"
	    ;;
	--outdir)
	    outdir="$2"
	    ;;
	*)
	    echo "Unrecognized option(s) '$@'" >&2
	    exit 1
	    ;;
    esac
    shift 2
done

if [ -z "$infile" ]; then
    echo "No table was specified, aborting" >&2
    exit 1
fi
check_file_exists "$infile"
if [ -z "$outdir" ]; then
    echo "Output directory name must be specified!" >&2
    exit 1
fi
if [ -z "$outfile" ]; then
    echo "Services file for generated services must be specified" >&2
    exit 1
fi
if (( DEBUG )); then
    printf "%s" "$re_quote_prog" >"$outdir/re_quote.sed"
fi
outpath="${outdir}/${outfile}"
outpath="$(realpath "${outpath}")"
tmp="$(dirname "${outpath}")"
mkdir -p "$tmp"
if [ \! -d "$tmp" ]; then
    echo "Destination directory for $outfile in $outdir does not exist and could not be created" >&2
    exit 1
fi
# Set up allowed/excluded service
tmp="$excluded_services"
excluded_services="${system_excluded_services}"
for x in ${tmp/:/ }; do
    excluded_services="$(list_add_elt "$x" "$excluded_services")"
done
allowed_services="$(check_services "$system_allowed_services" "$excluded_services")"
# Verify all file size limits are obeyed
if [ "$table_size_limit" ]; then
    lim=$(( ${table_size_limit} * 1024 ))
    if (( $(stat %s "$infile") > $lim )); then
	echo "Table file is larger than allowed limit $lim, aborting" >&2
	exit 1
    fi
fi
if [ "$table_lines_limit" ]; then
    if (( $(wc -l "$infile") > $lim )); then
	echo "Table file has more lines than allowed limit $lim, aborting" >&2
	exit 1
    fi
fi
# set up template variables recorded in $template_file
exec 10<&0
exec <"${template_file}"

i=0
while read s tp tf; do
    tmpls[$i]="$tf"
    tmpl_tps[$i]="$tp"
    tmpl_svcs[$i]="$s"
    tmpl_text[$i]="$(< "$tf")"
    tmpl_scripts[$i]="$(mktemp -p $serviced)"
    if ! list_member "$s" "$allowed_services"; then
	echo "Service $s is either not available or not allowed" >&2
	exit 1
    fi
    tfp="$(realpath "$tf")"
    (( ++i , 1 ))
    if [ "$template_size_limit" ]; then
	if (( $(stat -c %s "$tfp") >
	      ( $template_size_limit * 1024 ) )); then
	    if [ "$tp" = "file" ]; then
		echo "Template file $tf is larger than limit $template_size_limit kB" >&2
	    else
		echo "Template $i is larger than limit $template_size_limit kB" >&2
	    fi
	    exit 1
	fi
    fi
done
N=$i

exec <&10
exec 10<&-

ulimit_flags=""
if [ "$cpu_limit" ]; then
    ulimit_flags="$ulimit_flags -t $cpu_limit"
fi
if [ "$memory_limit" ]; then
    ulimit_flags="$ulimit_flags -m $memory_limit"
fi
if [ "$stack_limit" ]; then
    ulimit_flags="$ulimit_flags -s $stack_limit"
fi
if [ "$file_size_limit" ]; then
    ulimit_flags="$ulimit_flags -f $file_size_limit"
fi

# impose limits here to ensure the complicated
# sed programs embedded in this script are included
if [ "$ulimit_flags" ]; then
    ulimit $ulimit_flags
fi
   
template_error() {
    local tp="$1"
    local tno="$2"
    local tsrc="$3"
    local msg="$4"
    if [ "$tp" = "file" ]; then
	echo "Error in template ${tsrc}: $msg" >&2
    else
	echo "Error in template #${tno}: $msg" >&2
    fi
    exit 1
}

expand_template() {
    local svc="$1"
    local tp="$2"
    local tmpl="$3"
    local tmpl_no="$4"
    local prog="$5"
    local params
    if ! params="$(process_template "$prog" "$tmpl")"; then
	local err=$?
	if (( $err == 2 )); then
	    template_error "$tp" "$tmpl_no" "$tmpl_src" \
	    		   "Illegal XML closing tag"
	else
	    template_error "$tp" "$tmpl_no" "$tmpl_src" \
	    		   "Expansion error"
	fi

    fi
    local xml="  <service name=\"$svc\" mode=\"trylocal\">"
    #local xml="<service name=\"$svc\">"
    xml+=$'\n'
    xml+="$params"
    xml+=$'\n'
    xml+=$'</service>\n'
    printf "%s" "$xml"
}

expand_templates() {
    local i N=${#tmpls[@]}
    local prog="$1"
    local svc tmpl tp
    local txt
    local xml=""
    for (( i = 0 ; i < N ; i++ )); do
	svc="${tmpl_svcs[$i]}"
	tp="${tmpl_tps[$i]}"
	tmpl="${tmpls[$i]}"
	expand_template "$svc" "$tp" "$tmpl" $i "$prog"
    done    
}
if [ "$ulimit_flags" ]; then
    ulimit ${ulimit_flags}
fi


re_quote_and_expand_templates() {
    local j tbl_k=$1 svcs_file="$2"
    shift 2
    local M=$#
    local -a quoted_values
    for (( j = 0; j < M; j++ )); do
	quoted_values[$j]="$(re_quote "$1")"
	shift
    done
    local tmpl_prog="$(make_tmpl_prog "${quoted_values[@]}")"
    # for debugging
    if (( $DEBUG )); then
	printf "%s" "$tmpl_prog" >"$outdir/template_subst_${tbl_k}.sed"
    fi
    expand_templates "$(make_tmpl_prog "${quoted_values[@]}")" >>"$svcs_file"
}

exec 10<&0
exec <"$infile"
svcs_file="$(mktemp -p "$serviced")"
echo "<services>" >$svcs_file
tbl_line=1
while read -a vals; do
    if (( ${#vals[@]} == 0 )); then
	# ignore empty lines
	continue
    elif [ "${vals[0]}" != "$(echo ${vals[0]} | sed -re 's/^#//' |tr -d '\n' )" ]; then
	# discard comments
	continue
    fi
    re_quote_and_expand_templates "$tbl_line" "$svcs_file" "${vals[@]}"
    (( ++tbl_line ))
done
echo "</services>" >>$svcs_file
exec <&10
exec 10<&-
cp "$svcs_file" "$outpath"