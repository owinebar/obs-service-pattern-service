tmpl_prog=""
tmpl_prog+=$'/^\\w+(\\s|$)/ {\n'
tmpl_prog+=$'    t clear0; : clear0\n'
tmpl_prog+=$'    h\n'
tmpl_prog+=$'    s/^(\\w+)(\\s.*)?$/\\1\\x00/ ; t validname\n'
tmpl_prog+=$'    =; i Invalid name\n'
tmpl_prog+=$'    Q 1\n'
tmpl_prog+=$'    : validname\n'
tmpl_prog+=$'    x\n'
tmpl_prog+=$'    s/^(\\w+)\\s+(\\S.*)$/\\2/\n'
tmpl_prog+=$'    t clear1\n'
tmpl_prog+=$'    : clear1\n'
tmpl_prog+=$'    s/<<EOF\\s*(\\n|\\\')//; t EOFloop\n'
tmpl_prog+=$'    # else whatever is left on the line is the value of the parameter\n'
tmpl_prog+=$'    H\n'
tmpl_prog+=$'    b gosubst\n'
tmpl_prog+=$'\n'
tmpl_prog+=$'    : EOFloop\n'
tmpl_prog+=$'    # take care not to exit sed before closing the parameter block\n'
tmpl_prog+=$'    $ b finishtmpl\n'
tmpl_prog+=$'    n\n'
tmpl_prog+=$'    t clear2\n'
tmpl_prog+=$'    : clear2\n'
tmpl_prog+=$'    s#\\`EOF(\\n|\\\')## ; t gosubst\n'
tmpl_prog+=$'    H\n'
tmpl_prog+=$'    b EOFloop\n'
tmpl_prog+=$'    : gosubst\n'
tmpl_prog+=$'    z\n'
tmpl_prog+=$'    x\n'
tmpl_prog+=$'    s#\\`([^\\x00]+)\\x00\\n#\\1\\x00#\n'
tmpl_prog+=$'    # swap ordering for substitution\n'
tmpl_prog+=$'    s#\\`([^\\x00]+)\\x00(.*)\\\'#\\2\\x00\\1#\n'
tmpl_prog+=$'    b subst\n'
tmpl_prog+=$'    : finishtmpl\n'
tmpl_prog+=$'    # Check for illegal xml close tags\n'
tmpl_prog+=$'    h\n'
tmpl_prog+=$'    s#\\`([^\\x00]+)\\x00(.*)\\\'#\\2#\n'
tmpl_prog+=$'    \\#</(service|param)# {\n'
tmpl_prog+=$'	=; i Illegal xml close\n'
tmpl_prog+=$'	Q 2\n'
tmpl_prog+=$'    }\n'
tmpl_prog+=$'    z; x\n'
tmpl_prog+=$'    s#\\`([^\\x00]+)\\x00(.*)\\\'#<param name="\\1">\\2</param>#\n'
tmpl_prog+=$'    p\n'
tmpl_prog+=$'    d\n'
tmpl_prog+=$'}\n'
tmpl_prog+=$'# Any other lines are illegal\n'
tmpl_prog+=$'=; i Unrecognized\n'
tmpl_prog+=$'Q 1\n'
tmpl_prog+=$'\n'
tmpl_prog+=$'\n'
tmpl_prog+=$': subst\n'
tmpl_prog+=$'/\\$|\\\\/ {\n'
tmpl_prog+=$'    : findnextsub\n'
tmpl_prog+=$'    t clear3\n'
tmpl_prog+=$'    : clear3\n'
tmpl_prog+=$'    # if we are at the end of text\n'
tmpl_prog+=$'    # clean up and restart cycle\n'
tmpl_prog+=$'    s/\\`\\x00// ; t joinhold\n'
tmpl_prog+=$'    # s/\\`\\n//; t accumulatenl\n'
tmpl_prog+=$'    # Otherwise if there are non-control chars, accumulate \n'
tmpl_prog+=$'    s/\\`([^\\$\\x00]+)/\\1\\x00/; t accumulate\n'
tmpl_prog+=$'    # Must have a control sequence at the head\n'
tmpl_prog+=$'    s/\\`\\\\\\\\/\\\\\\x00/ ; t accumulate\n'
tmpl_prog+=$'    s/\\`\\\\\\$/\\$\\x00/ ; t accumulate\n'
tmpl_prog+=$'    s/\\`\\\\/\\\\\\x00/ ; t accumulate\n'
tmpl_prog+=$'    s/\\`\\$\\{([1-9][0-9]*)\\}/\\1\\x00/ ; t substitute\n'
tmpl_prog+=$'    s/\\`\\$/\\$\\x00/ ; t accumulate\n'
tmpl_prog+=$'    # should be impossible\n'
tmpl_prog+=$'    b nomatcherr\n'
tmpl_prog+=$'    :substitute\n'
tmpl_prog+=$'    # commands of the form\n'
tmpl_prog+=$'    # s#\\`<parameter number>\\x00#<replacement text>\\x00#; t accumulate\n'
tmpl_prog+=$'    s#\\`1\\x00# Mercury \\x00#; t accumulate\n'
tmpl_prog+=$'    s#\\`2\\x00# Venus \\x00#; t accumulate\n'
tmpl_prog+=$'    s#\\`3\\x00# Earth \\x00#; t accumulate\n'
tmpl_prog+=$'    s#\\`4\\x00# Mars \\x00#; t accumulate\n'
tmpl_prog+=$'    s#\\`5\\x00# Jupiter \\x00#; t accumulate\n'
tmpl_prog+=$'    # if not matched, provide empty value\n'
tmpl_prog+=$'    s/\\`[^\\x00]+\\x00/\\x00/; t accumulate\n'
tmpl_prog+=$'    b nomatcherr\n'
tmpl_prog+=$'\n'
tmpl_prog+=$'    : accumulate\n'
tmpl_prog+=$'    # First line of pattern space contains text to accumulate\n'
tmpl_prog+=$'    # second line contains unprocessed text\n'
tmpl_prog+=$'    # hold space contains processed text\n'
tmpl_prog+=$'    s/\\`/\\x00/\n'
tmpl_prog+=$'    x\n'
tmpl_prog+=$'    G\n'
tmpl_prog+=$'    s/\\`([^\\x00]*)\\n\\x00([^\\x00]*)\\x00(.*)\\\'/\\1\\2/\n'
tmpl_prog+=$'    x\n'
tmpl_prog+=$'    s/\\`\\x00([^\\x00]*)\\x00(.*)\\\'/\\2/\n'
tmpl_prog+=$'    b findnextsub\n'
tmpl_prog+=$'\n'
tmpl_prog+=$'    : joinhold\n'
tmpl_prog+=$'    s/\\\'/\\x00/\n'
tmpl_prog+=$'    G\n'
tmpl_prog+=$'    s/\\`([^\\x00]*\\x00)\\n/\\1/\n'
tmpl_prog+=$'    x;z;x\n'
tmpl_prog+=$'    b finishtmpl\n'
tmpl_prog+=$'    \n'
tmpl_prog+=$'}\n'
tmpl_prog+=$': returnsubst\n'
tmpl_prog+=$'# now back to starting configuration except last line of hold space has been substituted\n'
tmpl_prog+=$'# swap ordering for substitution\n'
tmpl_prog+=$'s#\\`([^\\x00]+)\\x00(.*)\\\'#\\2\\x00\\1#\n'
tmpl_prog+=$'b finishtmpl\n'
tmpl_prog+=$': nomatcherr\n'
tmpl_prog+=$'= ; i Impossible non-match\n'
tmpl_prog+=$'Q 1\n'
tmpl_prog+=$'\n'
